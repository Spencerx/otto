#----------------------------------------------------------------------------
#   Dialog data and code block - do not modify this code by hand
#   Generated by LIBERO 2.20 on 27 Feb, 1997, 11:20.
#   Schema file used: lrschema.pl
#----------------------------------------------------------------------------

#-- Symbolic constants and event numbers ------------------------------------

$LR_defaults_state = 3;
$LR_STATE_after_init = 0;
$LR_STATE_have_argument = 1;
$LR_STATE_have_command = 2;
$LR_STATE_defaults = 3;

$terminate_event = -1;                  # Halts the dialog
$LR_NULL_EVENT = -2;
$append_event = 0;
$call_event = 1;
$close_event = 2;
$comment_event = 3;
$compile_event = 4;
$copy_event = 5;
$delete_event = 6;
$echo_event = 7;
$error_event = 8;
$exception_event = 9;
$finished_event = 10;
$ignore_event = 11;
$install_event = 12;
$library_event = 13;
$link_event = 14;
$ok_event = 15;
$output_event = 16;
$pause_event = 17;
$rename_event = 18;
$require_event = 19;
$switch_event = 20;
$system_specific_event = 21;
$title_event = 22;

#-- Standard subroutines used by dialog interpreter -------------------------

sub raise_exception {
    local ($event) = @_;
    $the_exception_event = $event;
    $exception_raised = 1;
}

sub LR_initialise {
    $LR_nextst = "";
    $LR_nextst .= "00000000000000010000000";
    $LR_nextst .= "00000000001000020000100";
    $LR_nextst .= "22222222001222202222022";
    $LR_nextst .= "00000000030000000000000";

    $LR_action = "";
    $LR_action .= "000000000000000002000000000000010000000000";
    $LR_action .= "0000";
    $LR_action .= "000000000000000000000200000000030000000004";
    $LR_action .= "0000";
    $LR_action .= "060708091011121300002305141516001718192000";
    $LR_action .= "2122";
    $LR_action .= "000000000000000000020000000000000000000000";
    $LR_action .= "0000";

    $LR_module = "";
    $LR_module .= "0102" . "00";
    $LR_module .= "03" . "00";
    $LR_module .= "0405" . "00";
    $LR_module .= "0602" . "00";
    $LR_module .= "05" . "00";
    $LR_module .= "0705" . "00";
    $LR_module .= "0805" . "00";
    $LR_module .= "0905" . "00";
    $LR_module .= "1005" . "00";
    $LR_module .= "1105" . "00";
    $LR_module .= "1205" . "00";
    $LR_module .= "1305" . "00";
    $LR_module .= "1405" . "00";
    $LR_module .= "1505" . "00";
    $LR_module .= "1605" . "00";
    $LR_module .= "1705" . "00";
    $LR_module .= "1805" . "00";
    $LR_module .= "1905" . "00";
    $LR_module .= "2005" . "00";
    $LR_module .= "2105" . "00";
    $LR_module .= "2205" . "00";
    $LR_module .= "2305" . "00";
    $LR_module .= "242502" . "00";

    $LR_offset [1] = 0;
    $LR_offset [2] = 3;
    $LR_offset [3] = 5;
    $LR_offset [4] = 8;
    $LR_offset [5] = 11;
    $LR_offset [6] = 13;
    $LR_offset [7] = 16;
    $LR_offset [8] = 19;
    $LR_offset [9] = 22;
    $LR_offset [10] = 25;
    $LR_offset [11] = 28;
    $LR_offset [12] = 31;
    $LR_offset [13] = 34;
    $LR_offset [14] = 37;
    $LR_offset [15] = 40;
    $LR_offset [16] = 43;
    $LR_offset [17] = 46;
    $LR_offset [18] = 49;
    $LR_offset [19] = 52;
    $LR_offset [20] = 55;
    $LR_offset [21] = 58;
    $LR_offset [22] = 61;
    $LR_offset [23] = 64;
}

#-- Dialog interpreter starts here ------------------------------------------

$LR_state = 0;                          #   First state is always 0
&LR_initialise;                         #   Initialise static strings
&initialise_the_program;
while ($the_next_event != $terminate_event)
  {
    $LR_event = $the_next_event;
    $LR_event < 0 || $LR_event >= 23 && die
        "State ", $LR_state,
        " - event ", $LR_event, " is out of range\n";
    $LR_index = ($LR_state * 23 + $LR_event) * 2;
    $LR_index = substr ($LR_action, $LR_index, 2);
    $LR_savest = $LR_state;

    #   If no action for this event, try the defaults state
    if ($LR_index == 0)
      {
        $LR_state = $LR_defaults_state;
        $LR_index = ($LR_state * 23 + $LR_event) * 2;
        $LR_index = substr ($LR_action, $LR_index, 2);
        $LR_index == 0 && die
            "State ", $LR_state,
            " - event ", $LR_event, " is not accepted\n";
      }
    $the_next_event = $LR_NULL_EVENT;
    $the_exception_event = $LR_NULL_EVENT;
    $exception_raised = 0;

    #   Execute module list for state transition, 0 indicates end of list
    $LR_vecptr = $LR_offset [$LR_index];
    $LR_modnbr = substr ($LR_module, $LR_vecptr * 2, 2);
    while ($LR_modnbr > 0 && !$exception_raised)
      {
          {                             #   Execute the module
            $LR_modnbr == 1 && do { &initialise_program_data; last; };
            $LR_modnbr == 2 && do { &get_next_argument_value; last; };
            $LR_modnbr == 3 && do { &terminate_the_program; last; };
            $LR_modnbr == 4 && do { &open_command_script; last; };
            $LR_modnbr == 5 && do { &get_next_command_line; last; };
            $LR_modnbr == 6 && do { &process_the_switch; last; };
            $LR_modnbr == 7 && do { &process_append_command; last; };
            $LR_modnbr == 8 && do { &process_call_command; last; };
            $LR_modnbr == 9 && do { &process_close_command; last; };
            $LR_modnbr == 10 && do { &process_comment_command; last; };
            $LR_modnbr == 11 && do { &process_compile_command; last; };
            $LR_modnbr == 12 && do { &process_copy_command; last; };
            $LR_modnbr == 13 && do { &process_delete_command; last; };
            $LR_modnbr == 14 && do { &process_echo_command; last; };
            $LR_modnbr == 15 && do { &process_install_command; last; };
            $LR_modnbr == 16 && do { &process_library_command; last; };
            $LR_modnbr == 17 && do { &process_link_command; last; };
            $LR_modnbr == 18 && do { &open_new_output_file; last; };
            $LR_modnbr == 19 && do { &process_pause_command; last; };
            $LR_modnbr == 20 && do { &process_rename_command; last; };
            $LR_modnbr == 21 && do { &process_require_command; last; };
            $LR_modnbr == 22 && do { &process_system_specific_command; last; };
            $LR_modnbr == 23 && do { &process_title_command; last; };
            $LR_modnbr == 24 && do { &close_command_script; last; };
            $LR_modnbr == 25 && do { &signal_script_processed; last; };
          }
        $LR_vecptr++;
        $LR_modnbr = substr ($LR_module, $LR_vecptr * 2, 2);
      }

    #   Handle exception if any was raised
    if ($exception_raised)
      {
        $the_exception_event == $LR_NULL_EVENT ||
            ($LR_event = $the_exception_event);

        $the_next_event = $LR_event;
      }
    else
      {
        $LR_index = ($LR_state * 23 + $LR_event) * 1;
        $LR_state = substr ($LR_nextst, $LR_index, 1);
      }
    $LR_state = $LR_savest if ($LR_state == $LR_defaults_state);
    if ($the_next_event == $LR_NULL_EVENT)
      {
        &get_external_event;
        $the_next_event == $LR_NULL_EVENT && die
            "No event set after event ", $LR_event,
            " in state ", $LR_state, "\n";
      }
  }
1;                                      #   Return true value
